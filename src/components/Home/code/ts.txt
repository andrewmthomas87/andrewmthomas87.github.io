<pre class='code'><span class='p'>interface <span class='y'>IProps</span> extends</span> <span class='lb'><span class='y'>React</span>.<span class='g'>Props</span>&lt;<span class='gr'>void</span>&gt; { }</span><br /><br /><span class='lb'>@</span>observer<br /><span class='p'>class <span class='y'>BaseStationInventory</span> extends</span> <span class='lb'><span class='y'>React</span>.<span class='g'>Component</span>&lt;<span class='y'>IProps</span>, {}&gt; {</span><br /><br />    <span class='lb'>@</span><span class='b'>lazyInject</span>(<span class='r'>TYPES</span><span class='lb'>.</span>Socket) <span class='p'>private</span> _socket<span class='p'>:</span> <span class='y'>ISocket</span><br /><br />    <span class='lb'>@</span>observable <span class='p'>private</span> _$loaded<span class='p'>:</span> <span class='gr'>boolean</span> <span class='p'>=</span> <span class='o'>false</span><br /><br />    <span class='p'>private</span> _baseStations<span class='p'>:</span> <span class='y'>BaseStationObject</span>[]<br /><br />    <span class='p'>public</span> <span class='b'>componentWillMount</span><span class='lb'>() {</span><br />        <span class='r'>this</span><span class='lb'>.</span>_socket<span class='lb'>.<span class='b'>request</span>&lt;<span class='y'>BaseStationsBundle</span>&gt;</span>(<span class='lb'>'<span class='g'>service.event.customer.basestations.get</span>',</span> <span class='o'>null</span>)<br />            <span class='lb'>.</span><span class='b'>then</span>(<span class='r'>this</span><span class='lb'>.</span>_onBaseStations)<br />    <span class='lb'>}</span><br /><br />    <span class='p'>public</span> <span class='b'>render</span><span class='lb'>()<span class='p'>:</span> <span class='y'>JSX</span>.<span class='y'>Element</span> {</span><br />        <span class='p'>const</span> loaded<span class='p'>:</span> <span class='gr'>boolean</span> <span class='p'>=</span> <span class='r'>this</span><span class='lb'>.</span>_$loaded<br /><br /></pre>
